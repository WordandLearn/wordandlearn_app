// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/writing/class_.dart';
import 'models/writing/example.dart';
import 'models/writing/exercise.dart';
import 'models/writing/exercise_result.dart';
import 'models/writing/exercise_submission.dart';
import 'models/writing/flash_card_text.dart';
import 'models/writing/lesson.dart';
import 'models/writing/profile.dart';
import 'models/writing/profile_picture.dart';
import 'models/writing/school.dart';
import 'models/writing/session.dart';
import 'models/writing/topic.dart';
import 'models/writing/topic_example.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 1655807449241815476),
      name: 'Class_',
      lastPropertyId: const obx_int.IdUid(5, 9032537167648046675),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3425547682979860611),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4972053453911137538),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3636024066955735598),
            name: 'grade',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1747422012443035618),
            name: 'school',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 9032537167648046675),
            name: 'teacher',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 4835602465176179625),
      name: 'ExerciseResult',
      lastPropertyId: const obx_int.IdUid(9, 6665269821151921774),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5026061041628865394),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6968930959049915325),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5965312992675162920),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4311660677450619801),
            name: 'recommendation',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5884196549155538997),
            name: 'score',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2128170645936946345),
            name: 'rubricScore',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3476363674058057789),
            name: 'feedback',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6667825319147502966),
            name: 'improvement',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 6665269821151921774),
            name: 'exercise',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 5265677823852700804),
      name: 'Profile',
      lastPropertyId: const obx_int.IdUid(10, 5794298898051072543),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3382996489539614532),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5860543611076597695),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 9207562451065177266),
            name: 'address',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 9136554154833731044),
            name: 'phone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4692608667664582978),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 866764015513879697),
            name: 'isActive',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8691090549894353298),
            name: 'slug',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6765610700684752159),
            name: 'school',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7392777173710326368),
            name: 'grade',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 5794298898051072543),
            name: 'user',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 638368487588172454),
      name: 'ProfilePicture',
      lastPropertyId: const obx_int.IdUid(3, 3766918823807505312),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 133778235885113635),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5575228226252710349),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3766918823807505312),
            name: 'thumbnailUrl',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 976995799903111107),
      name: 'School',
      lastPropertyId: const obx_int.IdUid(8, 5432923996904102573),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 238771516061634351),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4026403322257125529),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6256564644429871783),
            name: 'address',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3969818543038972140),
            name: 'phone',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3657531581606077927),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5575184637097597600),
            name: 'isActive',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3161241062736126261),
            name: 'slug',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5432923996904102573),
            name: 'user',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 1997997741068520198),
      name: 'Example',
      lastPropertyId: const obx_int.IdUid(6, 2787203857127617518),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7824195631852513275),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7095781560558507000),
            name: 'originalText',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2515711400475737625),
            name: 'transformedText',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8442708252525876153),
            name: 'guide',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 57792633061268467),
            name: 'completed',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2787203857127617518),
            name: 'topic',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 2780884820480351037),
      name: 'Exercise',
      lastPropertyId: const obx_int.IdUid(8, 9175611087432947943),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7645707283969580586),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 906121449240553218),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8090243446090139626),
            name: 'test',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6939362502482298963),
            name: 'aim',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2204198837621673955),
            name: 'difficulty',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4860048928964231757),
            name: 'topic',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8467164151066133),
            name: 'lesson',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 9175611087432947943),
            name: 'completed',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 2854717115095891801),
      name: 'ExerciseSubmission',
      lastPropertyId: const obx_int.IdUid(6, 2315618323933502267),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7593864476641127530),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4912558507830804106),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1143990000985250329),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2407617517076625389),
            name: 'text',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5722199330319099108),
            name: 'processed',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2315618323933502267),
            name: 'exercise',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(9, 3072085955987293172),
      name: 'FlashcardText',
      lastPropertyId: const obx_int.IdUid(5, 6531131471388174076),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1911990284923306169),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2965831961705650447),
            name: 'text',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 359254694965579836),
            name: 'topic',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7354246842812664094),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6531131471388174076),
            name: 'completed',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(10, 6611643516699852683),
      name: 'Lesson',
      lastPropertyId: const obx_int.IdUid(8, 5073747569056126665),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8779402318854365421),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7020351649775946581),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1426351615234945736),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8431600429948781934),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3231191108081157201),
            name: 'image',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6091633108698706744),
            name: 'isCompleted',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5638425804969323792),
            name: 'unlocked',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5073747569056126665),
            name: 'session',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(11, 577444833287895718),
      name: 'Session',
      lastPropertyId: const obx_int.IdUid(9, 7215792343884922199),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1632574633009226536),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7534102088511027898),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8301843616682984053),
            name: 'text',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3156340167002520980),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2136860897931849827),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5833764262866484313),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7222929087543943193),
            name: 'reportUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3232842930667287667),
            name: 'summary',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7215792343884922199),
            name: 'profile',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(12, 3603995096180776034),
      name: 'Topic',
      lastPropertyId: const obx_int.IdUid(12, 7879646681871280250),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6753791667292415947),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2530750420898880166),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5293467044448193252),
            name: 'updatedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 434627300398087914),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8805237622621549217),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 829827078552287149),
            name: 'completed',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 234811593026591083),
            name: 'tag',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7198431707138172966),
            name: 'lesson',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2368592408337700086),
            name: 'isCurrent',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3462491612561182256),
            name: 'isLocked',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 5015939315873942110),
            name: 'image',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 7879646681871280250),
            name: 'exerciseCompleted',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(13, 6725425267065775920),
      name: 'TopicExample',
      lastPropertyId: const obx_int.IdUid(6, 2380869738616383573),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6333180378905106132),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8116397135626452997),
            name: 'originalText',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4435931296804507053),
            name: 'transformedText',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4707625061634699665),
            name: 'guide',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3571629067236584913),
            name: 'completed',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2380869738616383573),
            name: 'topic',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(14, 8920517816433268549),
      name: 'CurrentSession',
      lastPropertyId: const obx_int.IdUid(3, 8651692646787675265),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 539849635360717752),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8611686588332469419),
            name: 'dateOpened',
            type: 12,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8651692646787675265),
            name: 'sessionId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 5421426556574875790),
            relationTarget: 'Session')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(14, 8920517816433268549),
      lastIndexId: const obx_int.IdUid(1, 5421426556574875790),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Class_: obx_int.EntityDefinition<Class_>(
        model: _entities[0],
        toOneRelations: (Class_ object) => [],
        toManyRelations: (Class_ object) => {},
        getId: (Class_ object) => object.id,
        setId: (Class_ object, int id) {
          object.id = id;
        },
        objectToFB: (Class_ object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.grade);
          fbb.addInt64(3, object.school);
          fbb.addInt64(4, object.teacher);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final gradeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final schoolParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final teacherParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final object = Class_(
              id: idParam,
              name: nameParam,
              grade: gradeParam,
              school: schoolParam,
              teacher: teacherParam);

          return object;
        }),
    ExerciseResult: obx_int.EntityDefinition<ExerciseResult>(
        model: _entities[1],
        toOneRelations: (ExerciseResult object) => [],
        toManyRelations: (ExerciseResult object) => {},
        getId: (ExerciseResult object) => object.id,
        setId: (ExerciseResult object, int id) {
          object.id = id;
        },
        objectToFB: (ExerciseResult object, fb.Builder fbb) {
          final recommendationOffset = fbb.writeString(object.recommendation);
          final rubricScoreOffset = fbb.writeString(object.rubricScore);
          final feedbackOffset = fbb.writeString(object.feedback);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(2, object.updatedAt.millisecondsSinceEpoch);
          fbb.addOffset(3, recommendationOffset);
          fbb.addInt64(4, object.score);
          fbb.addOffset(5, rubricScoreOffset);
          fbb.addOffset(6, feedbackOffset);
          fbb.addBool(7, object.improvement);
          fbb.addInt64(8, object.exercise);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final recommendationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final scoreParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final rubricScoreParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final feedbackParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final improvementParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final exerciseParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final object = ExerciseResult(
              id: idParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam,
              recommendation: recommendationParam,
              score: scoreParam,
              rubricScore: rubricScoreParam,
              feedback: feedbackParam,
              improvement: improvementParam,
              exercise: exerciseParam);

          return object;
        }),
    Profile: obx_int.EntityDefinition<Profile>(
        model: _entities[2],
        toOneRelations: (Profile object) => [],
        toManyRelations: (Profile object) => {},
        getId: (Profile object) => object.id,
        setId: (Profile object, int id) {
          object.id = id;
        },
        objectToFB: (Profile object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final addressOffset =
              object.address == null ? null : fbb.writeString(object.address!);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final slugOffset =
              object.slug == null ? null : fbb.writeString(object.slug!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, addressOffset);
          fbb.addOffset(3, phoneOffset);
          fbb.addOffset(4, emailOffset);
          fbb.addBool(5, object.isActive);
          fbb.addOffset(6, slugOffset);
          fbb.addInt64(7, object.school);
          fbb.addInt64(8, object.grade);
          fbb.addInt64(9, object.user);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final isActiveParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 14);
          final userParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final addressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final phoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final gradeParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final slugParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final schoolParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final object = Profile(
              id: idParam,
              name: nameParam,
              isActive: isActiveParam,
              user: userParam,
              address: addressParam,
              phone: phoneParam,
              email: emailParam,
              grade: gradeParam,
              slug: slugParam,
              school: schoolParam);

          return object;
        }),
    ProfilePicture: obx_int.EntityDefinition<ProfilePicture>(
        model: _entities[3],
        toOneRelations: (ProfilePicture object) => [],
        toManyRelations: (ProfilePicture object) => {},
        getId: (ProfilePicture object) => object.id,
        setId: (ProfilePicture object, int id) {
          object.id = id;
        },
        objectToFB: (ProfilePicture object, fb.Builder fbb) {
          final imageUrlOffset = fbb.writeString(object.imageUrl);
          final thumbnailUrlOffset = fbb.writeString(object.thumbnailUrl);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, imageUrlOffset);
          fbb.addOffset(2, thumbnailUrlOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final imageUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final thumbnailUrlParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final object = ProfilePicture(
              id: idParam,
              imageUrl: imageUrlParam,
              thumbnailUrl: thumbnailUrlParam);

          return object;
        }),
    School: obx_int.EntityDefinition<School>(
        model: _entities[4],
        toOneRelations: (School object) => [],
        toManyRelations: (School object) => {},
        getId: (School object) => object.id,
        setId: (School object, int id) {
          object.id = id;
        },
        objectToFB: (School object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final addressOffset =
              object.address == null ? null : fbb.writeString(object.address!);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final slugOffset =
              object.slug == null ? null : fbb.writeString(object.slug!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, addressOffset);
          fbb.addOffset(3, phoneOffset);
          fbb.addOffset(4, emailOffset);
          fbb.addBool(5, object.isActive);
          fbb.addOffset(6, slugOffset);
          fbb.addInt64(7, object.user);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final addressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final phoneParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final isActiveParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 14);
          final slugParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final userParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final object = School(
              id: idParam,
              name: nameParam,
              address: addressParam,
              phone: phoneParam,
              email: emailParam,
              isActive: isActiveParam,
              slug: slugParam,
              user: userParam);

          return object;
        }),
    Example: obx_int.EntityDefinition<Example>(
        model: _entities[5],
        toOneRelations: (Example object) => [],
        toManyRelations: (Example object) => {},
        getId: (Example object) => object.id,
        setId: (Example object, int id) {
          if (object.id != id) {
            throw ArgumentError('Field Example.id is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.id=${object.id}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (Example object, fb.Builder fbb) {
          final originalTextOffset = fbb.writeString(object.originalText);
          final transformedTextOffset = fbb.writeString(object.transformedText);
          final guideOffset = fbb.writeString(object.guide);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, originalTextOffset);
          fbb.addOffset(2, transformedTextOffset);
          fbb.addOffset(3, guideOffset);
          fbb.addBool(4, object.completed);
          fbb.addInt64(5, object.topic);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final originalTextParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final transformedTextParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final guideParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final completedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final topicParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final object = Example(
              id: idParam,
              originalText: originalTextParam,
              transformedText: transformedTextParam,
              guide: guideParam,
              completed: completedParam,
              topic: topicParam);

          return object;
        }),
    Exercise: obx_int.EntityDefinition<Exercise>(
        model: _entities[6],
        toOneRelations: (Exercise object) => [],
        toManyRelations: (Exercise object) => {},
        getId: (Exercise object) => object.id,
        setId: (Exercise object, int id) {
          if (object.id != id) {
            throw ArgumentError('Field Exercise.id is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.id=${object.id}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (Exercise object, fb.Builder fbb) {
          final descriptionOffset = fbb.writeString(object.description);
          final testOffset =
              object.test == null ? null : fbb.writeString(object.test!);
          final aimOffset = fbb.writeString(object.aim);
          final difficultyOffset = object.difficulty == null
              ? null
              : fbb.writeString(object.difficulty!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, descriptionOffset);
          fbb.addOffset(2, testOffset);
          fbb.addOffset(3, aimOffset);
          fbb.addOffset(4, difficultyOffset);
          fbb.addInt64(5, object.topic);
          fbb.addInt64(6, object.lesson);
          fbb.addBool(7, object.completed);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final completedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final testParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final aimParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final difficultyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final topicParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final lessonParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final object = Exercise(
              id: idParam,
              completed: completedParam,
              description: descriptionParam,
              test: testParam,
              aim: aimParam,
              difficulty: difficultyParam,
              topic: topicParam,
              lesson: lessonParam);

          return object;
        }),
    ExerciseSubmission: obx_int.EntityDefinition<ExerciseSubmission>(
        model: _entities[7],
        toOneRelations: (ExerciseSubmission object) => [],
        toManyRelations: (ExerciseSubmission object) => {},
        getId: (ExerciseSubmission object) => object.id,
        setId: (ExerciseSubmission object, int id) {
          if (object.id != id) {
            throw ArgumentError('Field ExerciseSubmission.id is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.id=${object.id}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (ExerciseSubmission object, fb.Builder fbb) {
          final imageUrlOffset = fbb.writeString(object.imageUrl);
          final textOffset = fbb.writeString(object.text);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.createdAt.millisecondsSinceEpoch);
          fbb.addOffset(2, imageUrlOffset);
          fbb.addOffset(3, textOffset);
          fbb.addBool(4, object.processed);
          fbb.addInt64(5, object.exercise);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final imageUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final textParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final processedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final exerciseParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final object = ExerciseSubmission(
              id: idParam,
              createdAt: createdAtParam,
              imageUrl: imageUrlParam,
              text: textParam,
              processed: processedParam,
              exercise: exerciseParam);

          return object;
        }),
    FlashcardText: obx_int.EntityDefinition<FlashcardText>(
        model: _entities[8],
        toOneRelations: (FlashcardText object) => [],
        toManyRelations: (FlashcardText object) => {},
        getId: (FlashcardText object) => object.id,
        setId: (FlashcardText object, int id) {
          if (object.id != id) {
            throw ArgumentError('Field FlashcardText.id is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.id=${object.id}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (FlashcardText object, fb.Builder fbb) {
          final textOffset = fbb.writeString(object.text);
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, textOffset);
          fbb.addInt64(2, object.topic);
          fbb.addOffset(3, titleOffset);
          fbb.addBool(4, object.completed);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final textParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final topicParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final completedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final object = FlashcardText(
              id: idParam,
              text: textParam,
              topic: topicParam,
              title: titleParam,
              completed: completedParam);

          return object;
        }),
    Lesson: obx_int.EntityDefinition<Lesson>(
        model: _entities[9],
        toOneRelations: (Lesson object) => [],
        toManyRelations: (Lesson object) => {},
        getId: (Lesson object) => object.id,
        setId: (Lesson object, int id) {
          if (object.id != id) {
            throw ArgumentError('Field Lesson.id is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.id=${object.id}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (Lesson object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final descriptionOffset = fbb.writeString(object.description);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addInt64(3, object.createdAt.millisecondsSinceEpoch);
          fbb.addOffset(4, imageOffset);
          fbb.addBool(5, object.isCompleted);
          fbb.addBool(6, object.unlocked);
          fbb.addInt64(7, object.session);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final imageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final sessionParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final unlockedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          final isCompletedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final object = Lesson(
              title: titleParam,
              description: descriptionParam,
              createdAt: createdAtParam,
              id: idParam,
              image: imageParam,
              session: sessionParam,
              unlocked: unlockedParam,
              isCompleted: isCompletedParam);

          return object;
        }),
    Session: obx_int.EntityDefinition<Session>(
        model: _entities[10],
        toOneRelations: (Session object) => [],
        toManyRelations: (Session object) => {},
        getId: (Session object) => object.id,
        setId: (Session object, int id) {
          if (object.id != id) {
            throw ArgumentError('Field Session.id is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.id=${object.id}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (Session object, fb.Builder fbb) {
          final textOffset = fbb.writeString(object.text);
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final imageUrlOffset = object.imageUrl == null
              ? null
              : fbb.writeString(object.imageUrl!);
          final reportUrlOffset = object.reportUrl == null
              ? null
              : fbb.writeString(object.reportUrl!);
          final summaryOffset =
              object.summary == null ? null : fbb.writeString(object.summary!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.updatedAt.millisecondsSinceEpoch);
          fbb.addOffset(2, textOffset);
          fbb.addOffset(3, titleOffset);
          fbb.addOffset(4, imageUrlOffset);
          fbb.addInt64(5, object.createdAt.millisecondsSinceEpoch);
          fbb.addOffset(6, reportUrlOffset);
          fbb.addOffset(7, summaryOffset);
          fbb.addInt64(8, object.profile);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final textParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final imageUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final reportUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final summaryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final profileParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final object = Session(
              id: idParam,
              updatedAt: updatedAtParam,
              text: textParam,
              title: titleParam,
              imageUrl: imageUrlParam,
              createdAt: createdAtParam,
              reportUrl: reportUrlParam,
              summary: summaryParam,
              profile: profileParam);

          return object;
        }),
    Topic: obx_int.EntityDefinition<Topic>(
        model: _entities[11],
        toOneRelations: (Topic object) => [],
        toManyRelations: (Topic object) => {},
        getId: (Topic object) => object.id,
        setId: (Topic object, int id) {
          if (object.id != id) {
            throw ArgumentError('Field Topic.id is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.id=${object.id}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (Topic object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final descriptionOffset = fbb.writeString(object.description);
          final tagOffset = fbb.writeString(object.tag);
          final imageOffset =
              object.image == null ? null : fbb.writeString(object.image!);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(2, object.updatedAt.millisecondsSinceEpoch);
          fbb.addOffset(3, titleOffset);
          fbb.addOffset(4, descriptionOffset);
          fbb.addBool(5, object.completed);
          fbb.addOffset(6, tagOffset);
          fbb.addInt64(7, object.lesson);
          fbb.addBool(8, object.isCurrent);
          fbb.addBool(9, object.isLocked);
          fbb.addOffset(10, imageOffset);
          fbb.addBool(11, object.exerciseCompleted);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final completedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final tagParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final lessonParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final imageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 24);
          final exerciseCompletedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 26, false);
          final isLockedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false);
          final isCurrentParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 20, false);
          final object = Topic(
              id: idParam,
              createdAt: createdAtParam,
              updatedAt: updatedAtParam,
              title: titleParam,
              description: descriptionParam,
              completed: completedParam,
              tag: tagParam,
              lesson: lessonParam,
              image: imageParam,
              exerciseCompleted: exerciseCompletedParam,
              isLocked: isLockedParam,
              isCurrent: isCurrentParam);

          return object;
        }),
    TopicExample: obx_int.EntityDefinition<TopicExample>(
        model: _entities[12],
        toOneRelations: (TopicExample object) => [],
        toManyRelations: (TopicExample object) => {},
        getId: (TopicExample object) => object.id,
        setId: (TopicExample object, int id) {
          if (object.id != id) {
            throw ArgumentError('Field TopicExample.id is read-only '
                '(final or getter-only) and it was declared to be self-assigned. '
                'However, the currently inserted object (.id=${object.id}) '
                "doesn't match the inserted ID (ID $id). "
                'You must assign an ID before calling [box.put()].');
          }
        },
        objectToFB: (TopicExample object, fb.Builder fbb) {
          final originalTextOffset = fbb.writeString(object.originalText);
          final transformedTextOffset = fbb.writeString(object.transformedText);
          final guideOffset = fbb.writeString(object.guide);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, originalTextOffset);
          fbb.addOffset(2, transformedTextOffset);
          fbb.addOffset(3, guideOffset);
          fbb.addBool(4, object.completed);
          fbb.addInt64(5, object.topic);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final originalTextParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final transformedTextParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final guideParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final completedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final topicParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final object = TopicExample(
              id: idParam,
              originalText: originalTextParam,
              transformedText: transformedTextParam,
              guide: guideParam,
              completed: completedParam,
              topic: topicParam);

          return object;
        }),
    CurrentSession: obx_int.EntityDefinition<CurrentSession>(
        model: _entities[13],
        toOneRelations: (CurrentSession object) => [object.session],
        toManyRelations: (CurrentSession object) => {},
        getId: (CurrentSession object) => object.id,
        setId: (CurrentSession object, int id) {
          object.id = id;
        },
        objectToFB: (CurrentSession object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.dateOpened.microsecondsSinceEpoch * 1000);
          fbb.addInt64(2, object.session.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateOpenedParam = DateTime.fromMicrosecondsSinceEpoch(
              (const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0) /
                      1000)
                  .round());
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object =
              CurrentSession(dateOpened: dateOpenedParam, id: idParam);
          object.session.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.session.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Class_] entity fields to define ObjectBox queries.
class Class__ {
  /// See [Class_.id].
  static final id =
      obx.QueryIntegerProperty<Class_>(_entities[0].properties[0]);

  /// See [Class_.name].
  static final name =
      obx.QueryStringProperty<Class_>(_entities[0].properties[1]);

  /// See [Class_.grade].
  static final grade =
      obx.QueryIntegerProperty<Class_>(_entities[0].properties[2]);

  /// See [Class_.school].
  static final school =
      obx.QueryIntegerProperty<Class_>(_entities[0].properties[3]);

  /// See [Class_.teacher].
  static final teacher =
      obx.QueryIntegerProperty<Class_>(_entities[0].properties[4]);
}

/// [ExerciseResult] entity fields to define ObjectBox queries.
class ExerciseResult_ {
  /// See [ExerciseResult.id].
  static final id =
      obx.QueryIntegerProperty<ExerciseResult>(_entities[1].properties[0]);

  /// See [ExerciseResult.createdAt].
  static final createdAt =
      obx.QueryDateProperty<ExerciseResult>(_entities[1].properties[1]);

  /// See [ExerciseResult.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<ExerciseResult>(_entities[1].properties[2]);

  /// See [ExerciseResult.recommendation].
  static final recommendation =
      obx.QueryStringProperty<ExerciseResult>(_entities[1].properties[3]);

  /// See [ExerciseResult.score].
  static final score =
      obx.QueryIntegerProperty<ExerciseResult>(_entities[1].properties[4]);

  /// See [ExerciseResult.rubricScore].
  static final rubricScore =
      obx.QueryStringProperty<ExerciseResult>(_entities[1].properties[5]);

  /// See [ExerciseResult.feedback].
  static final feedback =
      obx.QueryStringProperty<ExerciseResult>(_entities[1].properties[6]);

  /// See [ExerciseResult.improvement].
  static final improvement =
      obx.QueryBooleanProperty<ExerciseResult>(_entities[1].properties[7]);

  /// See [ExerciseResult.exercise].
  static final exercise =
      obx.QueryIntegerProperty<ExerciseResult>(_entities[1].properties[8]);
}

/// [Profile] entity fields to define ObjectBox queries.
class Profile_ {
  /// See [Profile.id].
  static final id =
      obx.QueryIntegerProperty<Profile>(_entities[2].properties[0]);

  /// See [Profile.name].
  static final name =
      obx.QueryStringProperty<Profile>(_entities[2].properties[1]);

  /// See [Profile.address].
  static final address =
      obx.QueryStringProperty<Profile>(_entities[2].properties[2]);

  /// See [Profile.phone].
  static final phone =
      obx.QueryStringProperty<Profile>(_entities[2].properties[3]);

  /// See [Profile.email].
  static final email =
      obx.QueryStringProperty<Profile>(_entities[2].properties[4]);

  /// See [Profile.isActive].
  static final isActive =
      obx.QueryBooleanProperty<Profile>(_entities[2].properties[5]);

  /// See [Profile.slug].
  static final slug =
      obx.QueryStringProperty<Profile>(_entities[2].properties[6]);

  /// See [Profile.school].
  static final school =
      obx.QueryIntegerProperty<Profile>(_entities[2].properties[7]);

  /// See [Profile.grade].
  static final grade =
      obx.QueryIntegerProperty<Profile>(_entities[2].properties[8]);

  /// See [Profile.user].
  static final user =
      obx.QueryIntegerProperty<Profile>(_entities[2].properties[9]);
}

/// [ProfilePicture] entity fields to define ObjectBox queries.
class ProfilePicture_ {
  /// See [ProfilePicture.id].
  static final id =
      obx.QueryIntegerProperty<ProfilePicture>(_entities[3].properties[0]);

  /// See [ProfilePicture.imageUrl].
  static final imageUrl =
      obx.QueryStringProperty<ProfilePicture>(_entities[3].properties[1]);

  /// See [ProfilePicture.thumbnailUrl].
  static final thumbnailUrl =
      obx.QueryStringProperty<ProfilePicture>(_entities[3].properties[2]);
}

/// [School] entity fields to define ObjectBox queries.
class School_ {
  /// See [School.id].
  static final id =
      obx.QueryIntegerProperty<School>(_entities[4].properties[0]);

  /// See [School.name].
  static final name =
      obx.QueryStringProperty<School>(_entities[4].properties[1]);

  /// See [School.address].
  static final address =
      obx.QueryStringProperty<School>(_entities[4].properties[2]);

  /// See [School.phone].
  static final phone =
      obx.QueryStringProperty<School>(_entities[4].properties[3]);

  /// See [School.email].
  static final email =
      obx.QueryStringProperty<School>(_entities[4].properties[4]);

  /// See [School.isActive].
  static final isActive =
      obx.QueryBooleanProperty<School>(_entities[4].properties[5]);

  /// See [School.slug].
  static final slug =
      obx.QueryStringProperty<School>(_entities[4].properties[6]);

  /// See [School.user].
  static final user =
      obx.QueryIntegerProperty<School>(_entities[4].properties[7]);
}

/// [Example] entity fields to define ObjectBox queries.
class Example_ {
  /// See [Example.id].
  static final id =
      obx.QueryIntegerProperty<Example>(_entities[5].properties[0]);

  /// See [Example.originalText].
  static final originalText =
      obx.QueryStringProperty<Example>(_entities[5].properties[1]);

  /// See [Example.transformedText].
  static final transformedText =
      obx.QueryStringProperty<Example>(_entities[5].properties[2]);

  /// See [Example.guide].
  static final guide =
      obx.QueryStringProperty<Example>(_entities[5].properties[3]);

  /// See [Example.completed].
  static final completed =
      obx.QueryBooleanProperty<Example>(_entities[5].properties[4]);

  /// See [Example.topic].
  static final topic =
      obx.QueryIntegerProperty<Example>(_entities[5].properties[5]);
}

/// [Exercise] entity fields to define ObjectBox queries.
class Exercise_ {
  /// See [Exercise.id].
  static final id =
      obx.QueryIntegerProperty<Exercise>(_entities[6].properties[0]);

  /// See [Exercise.description].
  static final description =
      obx.QueryStringProperty<Exercise>(_entities[6].properties[1]);

  /// See [Exercise.test].
  static final test =
      obx.QueryStringProperty<Exercise>(_entities[6].properties[2]);

  /// See [Exercise.aim].
  static final aim =
      obx.QueryStringProperty<Exercise>(_entities[6].properties[3]);

  /// See [Exercise.difficulty].
  static final difficulty =
      obx.QueryStringProperty<Exercise>(_entities[6].properties[4]);

  /// See [Exercise.topic].
  static final topic =
      obx.QueryIntegerProperty<Exercise>(_entities[6].properties[5]);

  /// See [Exercise.lesson].
  static final lesson =
      obx.QueryIntegerProperty<Exercise>(_entities[6].properties[6]);

  /// See [Exercise.completed].
  static final completed =
      obx.QueryBooleanProperty<Exercise>(_entities[6].properties[7]);
}

/// [ExerciseSubmission] entity fields to define ObjectBox queries.
class ExerciseSubmission_ {
  /// See [ExerciseSubmission.id].
  static final id =
      obx.QueryIntegerProperty<ExerciseSubmission>(_entities[7].properties[0]);

  /// See [ExerciseSubmission.createdAt].
  static final createdAt =
      obx.QueryDateProperty<ExerciseSubmission>(_entities[7].properties[1]);

  /// See [ExerciseSubmission.imageUrl].
  static final imageUrl =
      obx.QueryStringProperty<ExerciseSubmission>(_entities[7].properties[2]);

  /// See [ExerciseSubmission.text].
  static final text =
      obx.QueryStringProperty<ExerciseSubmission>(_entities[7].properties[3]);

  /// See [ExerciseSubmission.processed].
  static final processed =
      obx.QueryBooleanProperty<ExerciseSubmission>(_entities[7].properties[4]);

  /// See [ExerciseSubmission.exercise].
  static final exercise =
      obx.QueryIntegerProperty<ExerciseSubmission>(_entities[7].properties[5]);
}

/// [FlashcardText] entity fields to define ObjectBox queries.
class FlashcardText_ {
  /// See [FlashcardText.id].
  static final id =
      obx.QueryIntegerProperty<FlashcardText>(_entities[8].properties[0]);

  /// See [FlashcardText.text].
  static final text =
      obx.QueryStringProperty<FlashcardText>(_entities[8].properties[1]);

  /// See [FlashcardText.topic].
  static final topic =
      obx.QueryIntegerProperty<FlashcardText>(_entities[8].properties[2]);

  /// See [FlashcardText.title].
  static final title =
      obx.QueryStringProperty<FlashcardText>(_entities[8].properties[3]);

  /// See [FlashcardText.completed].
  static final completed =
      obx.QueryBooleanProperty<FlashcardText>(_entities[8].properties[4]);
}

/// [Lesson] entity fields to define ObjectBox queries.
class Lesson_ {
  /// See [Lesson.id].
  static final id =
      obx.QueryIntegerProperty<Lesson>(_entities[9].properties[0]);

  /// See [Lesson.title].
  static final title =
      obx.QueryStringProperty<Lesson>(_entities[9].properties[1]);

  /// See [Lesson.description].
  static final description =
      obx.QueryStringProperty<Lesson>(_entities[9].properties[2]);

  /// See [Lesson.createdAt].
  static final createdAt =
      obx.QueryDateProperty<Lesson>(_entities[9].properties[3]);

  /// See [Lesson.image].
  static final image =
      obx.QueryStringProperty<Lesson>(_entities[9].properties[4]);

  /// See [Lesson.isCompleted].
  static final isCompleted =
      obx.QueryBooleanProperty<Lesson>(_entities[9].properties[5]);

  /// See [Lesson.unlocked].
  static final unlocked =
      obx.QueryBooleanProperty<Lesson>(_entities[9].properties[6]);

  /// See [Lesson.session].
  static final session =
      obx.QueryIntegerProperty<Lesson>(_entities[9].properties[7]);
}

/// [Session] entity fields to define ObjectBox queries.
class Session_ {
  /// See [Session.id].
  static final id =
      obx.QueryIntegerProperty<Session>(_entities[10].properties[0]);

  /// See [Session.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<Session>(_entities[10].properties[1]);

  /// See [Session.text].
  static final text =
      obx.QueryStringProperty<Session>(_entities[10].properties[2]);

  /// See [Session.title].
  static final title =
      obx.QueryStringProperty<Session>(_entities[10].properties[3]);

  /// See [Session.imageUrl].
  static final imageUrl =
      obx.QueryStringProperty<Session>(_entities[10].properties[4]);

  /// See [Session.createdAt].
  static final createdAt =
      obx.QueryDateProperty<Session>(_entities[10].properties[5]);

  /// See [Session.reportUrl].
  static final reportUrl =
      obx.QueryStringProperty<Session>(_entities[10].properties[6]);

  /// See [Session.summary].
  static final summary =
      obx.QueryStringProperty<Session>(_entities[10].properties[7]);

  /// See [Session.profile].
  static final profile =
      obx.QueryIntegerProperty<Session>(_entities[10].properties[8]);
}

/// [Topic] entity fields to define ObjectBox queries.
class Topic_ {
  /// See [Topic.id].
  static final id =
      obx.QueryIntegerProperty<Topic>(_entities[11].properties[0]);

  /// See [Topic.createdAt].
  static final createdAt =
      obx.QueryDateProperty<Topic>(_entities[11].properties[1]);

  /// See [Topic.updatedAt].
  static final updatedAt =
      obx.QueryDateProperty<Topic>(_entities[11].properties[2]);

  /// See [Topic.title].
  static final title =
      obx.QueryStringProperty<Topic>(_entities[11].properties[3]);

  /// See [Topic.description].
  static final description =
      obx.QueryStringProperty<Topic>(_entities[11].properties[4]);

  /// See [Topic.completed].
  static final completed =
      obx.QueryBooleanProperty<Topic>(_entities[11].properties[5]);

  /// See [Topic.tag].
  static final tag =
      obx.QueryStringProperty<Topic>(_entities[11].properties[6]);

  /// See [Topic.lesson].
  static final lesson =
      obx.QueryIntegerProperty<Topic>(_entities[11].properties[7]);

  /// See [Topic.isCurrent].
  static final isCurrent =
      obx.QueryBooleanProperty<Topic>(_entities[11].properties[8]);

  /// See [Topic.isLocked].
  static final isLocked =
      obx.QueryBooleanProperty<Topic>(_entities[11].properties[9]);

  /// See [Topic.image].
  static final image =
      obx.QueryStringProperty<Topic>(_entities[11].properties[10]);

  /// See [Topic.exerciseCompleted].
  static final exerciseCompleted =
      obx.QueryBooleanProperty<Topic>(_entities[11].properties[11]);
}

/// [TopicExample] entity fields to define ObjectBox queries.
class TopicExample_ {
  /// See [TopicExample.id].
  static final id =
      obx.QueryIntegerProperty<TopicExample>(_entities[12].properties[0]);

  /// See [TopicExample.originalText].
  static final originalText =
      obx.QueryStringProperty<TopicExample>(_entities[12].properties[1]);

  /// See [TopicExample.transformedText].
  static final transformedText =
      obx.QueryStringProperty<TopicExample>(_entities[12].properties[2]);

  /// See [TopicExample.guide].
  static final guide =
      obx.QueryStringProperty<TopicExample>(_entities[12].properties[3]);

  /// See [TopicExample.completed].
  static final completed =
      obx.QueryBooleanProperty<TopicExample>(_entities[12].properties[4]);

  /// See [TopicExample.topic].
  static final topic =
      obx.QueryIntegerProperty<TopicExample>(_entities[12].properties[5]);
}

/// [CurrentSession] entity fields to define ObjectBox queries.
class CurrentSession_ {
  /// See [CurrentSession.id].
  static final id =
      obx.QueryIntegerProperty<CurrentSession>(_entities[13].properties[0]);

  /// See [CurrentSession.dateOpened].
  static final dateOpened =
      obx.QueryDateNanoProperty<CurrentSession>(_entities[13].properties[1]);

  /// See [CurrentSession.session].
  static final session = obx.QueryRelationToOne<CurrentSession, Session>(
      _entities[13].properties[2]);
}
